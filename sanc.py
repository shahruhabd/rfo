import time
import os
import shutil
import tempfile
import json
from datetime import datetime

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# from sanctions.models import RegulatoryDecision, ViolationType, SanctionType, Department
# from fins.models import Fin

def get_text_or_none(parent, class_name):
    tag = parent.select_one(class_name)
    return tag.get_text(strip=True) if tag else None

def parse_sanctions():
    start = time.time()
    tmp_profile = tempfile.mkdtemp()

    options = Options()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    # options.add_argument('--headless')  # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å, –∫–æ–≥–¥–∞ –≤—Å—ë –æ—Ç–ª–∞–¥–∏—Ç–µ
    options.add_argument('--window-size=1920,1080')
    options.add_argument(f'--user-data-dir={tmp_profile}')

    service = Service("chromedriver.exe")
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get("https://www.gov.kz/memleket/entities/ardfm/sanctions?lang=ru")
        time.sleep(1)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–∫—Ä—ã—Ç—å –±–∞–Ω–Ω–µ—Ä –∫—É–∫–∏
        try:
            btn = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button#onetrust-accept-btn-handler"))
            )
            btn.click()
        except Exception:
            pass

        current_page = driver.find_element(
            By.CSS_SELECTOR, "li.ant-pagination-item-active"
        ).text
        
        all_results = []
        while True:
            from selenium.common.exceptions import ElementClickInterceptedException, NoSuchElementException

            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, ".collapse-group button.collapse__header"))
            )

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
            buttons = driver.find_elements(By.CSS_SELECTOR, ".collapse-group button.collapse__header")
            for btn in buttons:
                driver.execute_script("""
                    const rect = arguments[0].getBoundingClientRect();
                    window.scrollBy(0, rect.top - (window.innerHeight / 2));
                """, btn)
                try:
                    btn.click()
                except ElementClickInterceptedException:
                    driver.execute_script("arguments[0].click();", btn)

                time.sleep(0.1)

            soup = BeautifulSoup(driver.page_source, "html.parser")
            blocks = soup.select(".collapse-group .card.collapse")

            for block in blocks:
                item = {
                    "bin": None,
                    "organization": None,
                    "decision_date": None,
                    "decision_number": None,
                    "violation_type": None,
                    "sanction_type": None,
                    "sanction_amount": None,
                    "responsible_body": None,
                    "execution_deadline": None,
                    "npa_article": None,
                    "note": None,
                    "npa_type": None,
                    "department": None,
                }

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                rows = block.select(".collapse__header__title--html .row")
                for row in rows:
                    k = get_text_or_none(row, ".col-md-4")
                    v = get_text_or_none(row, ".col-md-8")
                    if not k or not v:
                        continue
                    if "–ë–ò–ù" in k:
                        item["bin"] = v
                    elif "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" in k:
                        item["organization"] = v
                    elif "–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è" in k:
                        try:
                            item["decision_date"] = datetime.strptime(v, "%d.%m.%Y").date().isoformat()
                        except ValueError:
                            item["decision_date"] = v
                    elif "–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç–∏—è" in k:
                        item["decision_number"] = v

                # –î–µ—Ç–∞–ª–∏
                details = block.select(".collapse__content__card .row")
                for row in details:
                    label = get_text_or_none(row, ".typography__variant-bodyhl")
                    value = get_text_or_none(row, ".typography__variant-body")
                    if not label:
                        continue
                    if "–í–∏–¥ –≤–∑—ã—Å–∫–∞–Ω–∏—è" in label:
                        item["violation_type"] = value
                    elif "–¢–∏–ø –≤–∑—ã—Å–∫–∞–Ω–∏—è" in label:
                        item["sanction_type"] = value
                    elif "–ù–∞–ª–æ–∂–µ–Ω–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ" in label:
                        item["sanction_amount"] = value
                    elif "–°—É—â–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è" in label:
                        item["responsible_body"] = value
                    elif "–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è" in label:
                        try:
                            item["execution_deadline"] = datetime.strptime(value, "%d.%m.%Y").date().isoformat()
                        except ValueError:
                            item["execution_deadline"] = value
                    elif "–°—Ç–∞—Ç—å—è" in label:
                        item["npa_article"] = value
                    elif "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" in label:
                        item["note"] = value
                    elif "–¢–∏–ø –ù–ü–ê" in label:
                        item["npa_type"] = value
                    elif "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞" in label:
                        item["department"] = value

                all_results.append(item)
            
            next_link = driver.find_element(By.CSS_SELECTOR, "li.ant-pagination-next a")
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
            parent_li = next_link.find_element(By.XPATH, "..")
            if "ant-pagination-disabled" in parent_li.get_attribute("class"):
                break  # –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü

            # —Å–∫—Ä–æ–ª–ª–∏–º –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_link)
            time.sleep(0.2)  # –¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä—É –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å

            old_page = current_page

            # –∫–ª–∏–∫
            try:
                next_link.click()
            except ElementClickInterceptedException:
                driver.execute_script("arguments[0].click();", next_link)

            retries = 3
            for attempt in range(retries):
                try:
                    WebDriverWait(driver, 10).until(
                        lambda d: d.find_element(By.CSS_SELECTOR, "li.ant-pagination-item-active").text != old_page
                    )
                    break
                except Exception:
                    if attempt == retries - 1:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ {old_page} –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤.")
                        break
                    print("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    time.sleep(2)

    finally:
        driver.quit()
        shutil.rmtree(tmp_profile, ignore_errors=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    output_path = os.path.join(os.path.dirname(__file__), "sanctions.json")
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ
    duration = round(time.time() - start, 1)
    print(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ: {len(all_results)} –∑–∞–ø–∏—Å–µ–π")
    print(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration} —Å–µ–∫")

if __name__ == "__main__":
    parse_sanctions()
