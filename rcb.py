import os
import time
import shutil
import tempfile
from datetime import datetime

import pandas as pd
from bs4 import BeautifulSoup
from seleniumwire import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

from django.db import transaction
from fins.models import Fin, Sector
from parsers.models import ParseFins
from parsers.fin_updater import update_fin_from_kdfo
from fins.models import IssuedLicense  # –∑–∞–º–µ–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç –Ω–∞ –≤–∞—à


def safe_date(value):
    try:
        return datetime.strptime(value.strip(), "%d.%m.%Y").date()
    except Exception:
        return None


def extract_bank_licenses(driver):
    print("üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –†–¶–ë‚Ä¶")
    driver.get(
        "https://www.gov.kz/memleket/entities/ardfm/permissions-notifications/"
        "section/1/subsection/3/registry/29?lang=ru"
    )
    time.sleep(10)

    headers = driver.find_elements(By.CSS_SELECTOR, ".collapse__header")
    print(f"üñ±Ô∏è –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(headers)} ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å")
    for i, btn in enumerate(headers, 1):
        try:
            driver.execute_script("arguments[0].scrollIntoView(true);", btn)
            btn.click()
            if i % 10 == 0:
                print(f"  üñ±Ô∏è –†–∞—Å–∫—Ä—ã—Ç–æ {i}/{len(headers)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            time.sleep(0.2)
        except Exception as e:
            print(f"  ‚ö†Ô∏è –ù–µ —Å–º–æ–≥–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É #{i}: {e}")

    # –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    content_divs = driver.find_elements(By.CSS_SELECTOR, ".collapse__content")

    for content_div in content_divs:
        # 2) —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ Ant-Design
        inner_arrows = content_div.find_elements(By.CSS_SELECTOR, ".anticon-right.ant-collapse-arrow")
        if inner_arrows:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(inner_arrows)} –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ–∫—Ü–∏–π")
            for j, arrow in enumerate(inner_arrows):
                try:
                    driver.execute_script("arguments[0].scrollIntoView(true);", arrow)
                    time.sleep(1)

                    driver.execute_script("arguments[0].click();", arrow)
                    time.sleep(2)
                except:
                    pass

    # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ collapse —á–µ—Ä–µ–∑ JS
    driver.execute_script("""
        document.querySelectorAll('.ant-collapse-item').forEach(item => item.classList.add('ant-collapse-item-active'));
        document.querySelectorAll('.ant-collapse-content').forEach(content => {
            content.classList.remove('ant-collapse-content-inactive');
            content.classList.add('ant-collapse-content-active');
            content.style.display = 'block';
            content.style.height = 'auto';
        });
    """)
    time.sleep(1)

    print("üîç –°–Ω–∏–º–∞–µ–º HTML‚Ä¶")
    soup = BeautifulSoup(driver.page_source, "html.parser")
    cards = soup.select(".collapse__content__card")
    print(f"üì¶ –ü–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")

    records = []
    for idx, card in enumerate(cards, 1):
        collapse_div = card.find_parent("div", class_="collapse")
        if not collapse_div:
            print(f"  [{idx}] ‚ûñ –Ω–µ—Ç parent.div.collapse")
            continue
        header_btn = collapse_div.find("button", class_="collapse__header")
        if not header_btn:
            print(f"  [{idx}] ‚ûñ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            continue
        name_el = header_btn.select_one(".collapse__value")
        if not name_el:
            print(f"  [{idx}] ‚ûñ –Ω–µ—Ç .collapse__value")
            continue

        name = name_el.get_text(strip=True)
        data = {"name": name}

        table = card.select_one(".ant-descriptions-view table")
        if not table:
            print(f"  [{idx}] ‚ùå –Ω–µ—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            continue

        for row in table.select("tr"):
            th = row.select_one("th")
            td = row.select_one("td")
            if not th or not td:
                continue
            key = th.get_text(strip=True)
            val = td.get_text(strip=True)

            if "–ë–ò–ù" in key:
                data["bin"] = val
            elif "–ù–æ–º–µ—Ä –ë–î1" in key:
                data["primary_license_number"] = val
            elif "–î–∞—Ç–∞ –ë–î1" in key:
                data["primary_license_date"] = safe_date(val)
            elif "–ù–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏" in key:
                data["current_license_number"] = val
            elif "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏" in key:
                data["current_license_date"] = safe_date(val)

        print(f"  [{idx}] ‚Üí {data}")
        records.append(data)

    return records


def parse_rcb_from_govkz():
    start_time = datetime.now()
    total, skipped = 0, 0

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-ipv6")
    tmp_profile = tempfile.mkdtemp(prefix="selenium-")
    options.add_argument(f"--user-data-dir={tmp_profile}")

    service = Service("/usr/bin/chromedriver")
    driver = webdriver.Chrome(
        service=service,
        options=options,
        seleniumwire_options={"verify_ssl": False}
    )

    try:
        records = extract_bank_licenses(driver)
        print(f"üéØ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(records)}")

        with transaction.atomic():
            for rec in records:
                print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {rec}")
                bin_code = rec.get("bin", "").strip()
                if not bin_code:
                    print("  ‚ùå –ù–µ—Ç –ë–ò–ù ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped += 1
                    continue

                fin = Fin.objects.filter(bin=bin_code).first()
                if not fin:
                    print(f"  üì° Fin –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º update_fin_from_kdfo({bin_code})")
                    update_fin_from_kdfo(bin_code)
                    fin = Fin.objects.filter(bin=bin_code).first()
                if not fin:
                    print(f"  ‚ùå Fin –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped += 1
                    continue

                sector = Sector.objects.get(name_sector="–†—ã–Ω–æ–∫ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥")
                fin.sector.add(sector)
                print(f"  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–µ–∫—Ç–æ—Ä –†–¶–ë –∫ FIN {bin_code}")

                lic, created = IssuedLicense.objects.update_or_create(
                    fin=fin,
                    current_license_number=rec.get("current_license_number", ""),
                    defaults={
                        "organization_type": "–£—á–∞—Å—Ç–Ω–∏–∫ –†–¶–ë",
                        "primary_license_number": rec.get("primary_license_number", ""),
                        "primary_license_date": rec.get("primary_license_date"),
                        "current_license_date": rec.get("current_license_date"),
                        "decision_number": None,
                        "decision_date": None,
                        "currency": "",
                        "operations_count": 0,
                        "operations_description": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                        "is_reissued": False,
                    }
                )
                status = "–°–æ–∑–¥–∞–Ω–∞" if created else "–û–±–Ω–æ–≤–ª–µ–Ω–∞"
                print(f"  ‚úÖ {status} –ª–∏—Ü–µ–Ω–∑–∏—è: {lic.fin.bin} ‚Äî {lic.current_license_number}")
                total += 1

        ParseFins.objects.create(
            name="–†–¶–ë",
            total_records=len(records),
            new_records=total,
            skipped_records=skipped,
            duration=datetime.now() - start_time
        )

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        ParseFins.objects.create(
            name="–†–¶–ë",
            total_records=0,
            new_records=0,
            skipped_records=0,
            error=str(e),
            duration=datetime.now() - start_time
        )

    finally:
        driver.quit()
        shutil.rmtree(tmp_profile, ignore_errors=True)

    print(f"‚úÖ –ò—Ç–æ–≥ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    return total, skipped


if __name__ == "__main__":
    parse_rcb_from_govkz()
